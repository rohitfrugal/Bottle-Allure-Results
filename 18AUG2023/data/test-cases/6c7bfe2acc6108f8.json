{"uid":"6c7bfe2acc6108f8","name":"test_02_new_entry_2____Automation__Item_110____AT_IT_110____AKM_Leather___2000___2023_08_18___10___Good____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__","fullName":"Test_08_Reporting.TestReporting#test_02_new_entry_2____Automation__Item_110____AT_IT_110____AKM_Leather___2000___2023_08_18___10___Good____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__","historyId":"8f82134c000dd49f96a4e02c8b1de87e","time":{"start":1692342185113,"stop":1692342195747,"duration":10634},"description":"Check for View more Details","descriptionHtml":"<p>Check for View more Details</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom no such execution context: loader has changed while resolving nodes\n  (Session info: chrome=115.0.5790.173)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x004BA813+48355]\n\t(No symbol) [0x0044C4B1]\n\t(No symbol) [0x00355358]\n\t(No symbol) [0x00357D86]\n\t(No symbol) [0x003599E1]\n\t(No symbol) [0x00359A80]\n\t(No symbol) [0x003A1F1B]\n\t(No symbol) [0x003A093C]\n\t(No symbol) [0x0039A536]\n\t(No symbol) [0x003782DC]\n\t(No symbol) [0x003793DD]\n\tGetHandleVerifier [0x0071AABD+2539405]\n\tGetHandleVerifier [0x0075A78F+2800735]\n\tGetHandleVerifier [0x0075456C+2775612]\n\tGetHandleVerifier [0x005451E0+616112]\n\t(No symbol) [0x00455F8C]\n\t(No symbol) [0x00452328]\n\t(No symbol) [0x0045240B]\n\t(No symbol) [0x00444FF7]\n\tBaseThreadInitThunk [0x75167D59+25]\n\tRtlInitializeExceptionChain [0x7702B79B+107]\n\tRtlClearBits [0x7702B71F+191]","statusTrace":"self = <TestsCases.Test_08_Reporting.TestReporting testMethod=test_02_new_entry_2____Automation__Item_110____AT_IT_110____AKM...10___Good____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__>\n\n    def setUp(self):\n    \n>       super().initialize_driver()\n\nTest_08_Reporting.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Base\\BaseTest.py:30: in initialize_driver\n    self.driver = webdriver.Chrome(service=self.service, options=self.options)\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:80: in __init__\n    super().__init__(\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:104: in __init__\n    super().__init__(\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:286: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:378: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EA2D5FD090>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom no such execut...dInitThunk [0x75167D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7702B79B+107]\\\\n\\\\tRtlClearBits [0x7702B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from no such execution context: loader has changed while resolving nodes\nE         (Session info: chrome=115.0.5790.173)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x004BA813+48355]\nE       \t(No symbol) [0x0044C4B1]\nE       \t(No symbol) [0x00355358]\nE       \t(No symbol) [0x00357D86]\nE       \t(No symbol) [0x003599E1]\nE       \t(No symbol) [0x00359A80]\nE       \t(No symbol) [0x003A1F1B]\nE       \t(No symbol) [0x003A093C]\nE       \t(No symbol) [0x0039A536]\nE       \t(No symbol) [0x003782DC]\nE       \t(No symbol) [0x003793DD]\nE       \tGetHandleVerifier [0x0071AABD+2539405]\nE       \tGetHandleVerifier [0x0075A78F+2800735]\nE       \tGetHandleVerifier [0x0075456C+2775612]\nE       \tGetHandleVerifier [0x005451E0+616112]\nE       \t(No symbol) [0x00455F8C]\nE       \t(No symbol) [0x00452328]\nE       \t(No symbol) [0x0045240B]\nE       \t(No symbol) [0x00444FF7]\nE       \tBaseThreadInitThunk [0x75167D59+25]\nE       \tRtlInitializeExceptionChain [0x7702B79B+107]\nE       \tRtlClearBits [0x7702B71F+191]\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestReporting","time":{"start":1692341783058,"stop":1692341783059,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestReporting::0","time":{"start":1692342532003,"stop":1692342532006,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Reporting Module Test Cases"},{"name":"severity","value":"normal"},{"name":"suite","value":"Test_08_Reporting"},{"name":"subSuite","value":"TestReporting"},{"name":"host","value":"0day"},{"name":"thread","value":"9032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test_08_Reporting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"6c7bfe2acc6108f8.json","parameterValues":[]}