{"uid":"8bf93b96456c5952","name":"test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__","fullName":"Test_06_Inventory.TestInventory#test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__","historyId":"2f0d3c7364d3d14f4ed1469cf360481e","time":{"start":1692340059051,"stop":1692340084136,"duration":25085},"description":"Searching the Items from the search and adding a new Item to it","descriptionHtml":"<p>Searching the Items from the search and adding a new Item to it</p>\n","status":"broken","statusMessage":"AttributeError: 'TestInventory' object has no attribute 'log'","statusTrace":"self = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nItmeName = '(Automation) Item 12'\n\n    @allure.description(\"Searching the Items from the search and adding a new Item to it\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/InventoryData/InventoryTestCase.xlsx\", \"searchItem\"))\n    @unpack\n    def test_04_search_item(self, username, password, ItmeName):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(self.Inventory.search_item(ItmeName),\n                             True, msg=\"Searching a New Stock Item Failed\")\n\nTest_06_Inventory.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nfirst = None, second = True, msg = 'Searching a New Stock Item Failed'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nfirst = None, second = True, msg = 'Searching a New Stock Item Failed'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nfirst = None, second = True\nmsg = 'None != True : Searching a New Stock Item Failed'\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != True : Searching a New Stock Item Failed\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nItmeName = '(Automation) Item 12'\n\n    @allure.description(\"Searching the Items from the search and adding a new Item to it\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/InventoryData/InventoryTestCase.xlsx\", \"searchItem\"))\n    @unpack\n    def test_04_search_item(self, username, password, ItmeName):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(self.Inventory.search_item(ItmeName),\n                             True, msg=\"Searching a New Stock Item Failed\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Failed_Restocking_Items\", attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestInventory' object has no attribute 'log'\n\nTest_06_Inventory.py:96: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestInventory","time":{"start":1692339430185,"stop":1692339430185,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"testStage":{"description":"Searching the Items from the search and adding a new Item to it","status":"broken","statusMessage":"AttributeError: 'TestInventory' object has no attribute 'log'","statusTrace":"self = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nItmeName = '(Automation) Item 12'\n\n    @allure.description(\"Searching the Items from the search and adding a new Item to it\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/InventoryData/InventoryTestCase.xlsx\", \"searchItem\"))\n    @unpack\n    def test_04_search_item(self, username, password, ItmeName):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(self.Inventory.search_item(ItmeName),\n                             True, msg=\"Searching a New Stock Item Failed\")\n\nTest_06_Inventory.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nfirst = None, second = True, msg = 'Searching a New Stock Item Failed'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nfirst = None, second = True, msg = 'Searching a New Stock Item Failed'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nfirst = None, second = True\nmsg = 'None != True : Searching a New Stock Item Failed'\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != True : Searching a New Stock Item Failed\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.Test_06_Inventory.TestInventory testMethod=test_04_search_item_2___frugal_latido_com_np____Test_123_____Automation__Item_12__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nItmeName = '(Automation) Item 12'\n\n    @allure.description(\"Searching the Items from the search and adding a new Item to it\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/InventoryData/InventoryTestCase.xlsx\", \"searchItem\"))\n    @unpack\n    def test_04_search_item(self, username, password, ItmeName):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(self.Inventory.search_item(ItmeName),\n                             True, msg=\"Searching a New Stock Item Failed\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Failed_Restocking_Items\", attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestInventory' object has no attribute 'log'\n\nTest_06_Inventory.py:96: AttributeError","steps":[],"attachments":[{"uid":"e7684205872a163b","name":"Failed_Restocking_Items","source":"e7684205872a163b.png","type":"image/png","size":128187}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestInventory::0","time":{"start":1692340167247,"stop":1692340167247,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Inventory"},{"name":"severity","value":"normal"},{"name":"suite","value":"Test_06_Inventory"},{"name":"subSuite","value":"TestInventory"},{"name":"host","value":"0day"},{"name":"thread","value":"8368-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test_06_Inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"b53338f6503396a3","status":"passed","time":{"start":1691127268871,"stop":1691127298369,"duration":29498}},{"uid":"cb68db364e0e89f3","status":"passed","time":{"start":1690523495297,"stop":1690523518762,"duration":23465}}]},"tags":[]},"source":"8bf93b96456c5952.json","parameterValues":[]}