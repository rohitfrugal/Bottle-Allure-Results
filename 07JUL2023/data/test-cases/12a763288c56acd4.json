{"uid":"12a763288c56acd4","name":"Restocking the Items ","fullName":"TestInventory.TestInventory#test_restocking_item_6___frugal_latido_com_np____Test_123_____Automation__Item_74____AT_IT_74____Tester___2000___2023_07_07___10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__","historyId":"19d14eacf7ad3976087fae5af78ac2b7","time":{"start":1688712272765,"stop":1688712632963,"duration":360198},"description":"Selecting a new Category and restocking the Items ","descriptionHtml":"<p>Selecting a new Category and restocking the Items</p>\n","status":"broken","statusMessage":"AttributeError: 'TestInventory' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestInventory.TestInventory testMethod=test_restocking_item_6___frugal_latido_com_np____Test_123_____Autom..._10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__>\n\n    def tearDown(self):\n        try:\n>           self.driver.close()\n\nTestInventory.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2ba1dd15e05b272370cb59da11916521\")>\n\n    def close(self) -> None:\n        \"\"\"Closes the current window.\n    \n        :Usage:\n            ::\n    \n                driver.close()\n        \"\"\"\n>       self.execute(Command.CLOSE)\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:551: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2ba1dd15e05b272370cb59da11916521\")>\ndriver_command = 'close', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000214E53F44C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...dInitThunk [0x75D67D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7796B79B+107]\\\\n\\\\tRtlClearBits [0x7796B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0093A813+48355]\nE       \t(No symbol) [0x008CC4B1]\nE       \t(No symbol) [0x007D5358]\nE       \t(No symbol) [0x007C70EB]\nE       \t(No symbol) [0x007C77AA]\nE       \t(No symbol) [0x007C7748]\nE       \t(No symbol) [0x007BC2AA]\nE       \t(No symbol) [0x007BCB1D]\nE       \t(No symbol) [0x008227B8]\nE       \t(No symbol) [0x0081A703]\nE       \t(No symbol) [0x007F82DC]\nE       \t(No symbol) [0x007F93DD]\nE       \tGetHandleVerifier [0x00B9AABD+2539405]\nE       \tGetHandleVerifier [0x00BDA78F+2800735]\nE       \tGetHandleVerifier [0x00BD456C+2775612]\nE       \tGetHandleVerifier [0x009C51E0+616112]\nE       \t(No symbol) [0x008D5F8C]\nE       \t(No symbol) [0x008D2328]\nE       \t(No symbol) [0x008D240B]\nE       \t(No symbol) [0x008C4FF7]\nE       \tBaseThreadInitThunk [0x75D67D59+25]\nE       \tRtlInitializeExceptionChain [0x7796B79B+107]\nE       \tRtlClearBits [0x7796B71F+191]\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestInventory.TestInventory testMethod=test_restocking_item_6___frugal_latido_com_np____Test_123_____Autom..._10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__>\n\n    def tearDown(self):\n        try:\n            self.driver.close()\n        except WebDriverException as e:\n>           self.log.error(f\"Failed to close driver. {str(e)}\")\nE           AttributeError: 'TestInventory' object has no attribute 'log'\n\nTestInventory.py:105: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestInventory","time":{"start":1688711755811,"stop":1688711755811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"Selecting a new Category and restocking the Items ","status":"broken","statusMessage":"AttributeError: 'TestInventory' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestInventory.TestInventory testMethod=test_restocking_item_6___frugal_latido_com_np____Test_123_____Autom..._10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__>\n\n    def tearDown(self):\n        try:\n>           self.driver.close()\n\nTestInventory.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2ba1dd15e05b272370cb59da11916521\")>\n\n    def close(self) -> None:\n        \"\"\"Closes the current window.\n    \n        :Usage:\n            ::\n    \n                driver.close()\n        \"\"\"\n>       self.execute(Command.CLOSE)\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:551: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2ba1dd15e05b272370cb59da11916521\")>\ndriver_command = 'close', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000214E53F44C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...dInitThunk [0x75D67D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7796B79B+107]\\\\n\\\\tRtlClearBits [0x7796B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0093A813+48355]\nE       \t(No symbol) [0x008CC4B1]\nE       \t(No symbol) [0x007D5358]\nE       \t(No symbol) [0x007C70EB]\nE       \t(No symbol) [0x007C77AA]\nE       \t(No symbol) [0x007C7748]\nE       \t(No symbol) [0x007BC2AA]\nE       \t(No symbol) [0x007BCB1D]\nE       \t(No symbol) [0x008227B8]\nE       \t(No symbol) [0x0081A703]\nE       \t(No symbol) [0x007F82DC]\nE       \t(No symbol) [0x007F93DD]\nE       \tGetHandleVerifier [0x00B9AABD+2539405]\nE       \tGetHandleVerifier [0x00BDA78F+2800735]\nE       \tGetHandleVerifier [0x00BD456C+2775612]\nE       \tGetHandleVerifier [0x009C51E0+616112]\nE       \t(No symbol) [0x008D5F8C]\nE       \t(No symbol) [0x008D2328]\nE       \t(No symbol) [0x008D240B]\nE       \t(No symbol) [0x008C4FF7]\nE       \tBaseThreadInitThunk [0x75D67D59+25]\nE       \tRtlInitializeExceptionChain [0x7796B79B+107]\nE       \tRtlClearBits [0x7796B71F+191]\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestInventory.TestInventory testMethod=test_restocking_item_6___frugal_latido_com_np____Test_123_____Autom..._10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__>\n\n    def tearDown(self):\n        try:\n            self.driver.close()\n        except WebDriverException as e:\n>           self.log.error(f\"Failed to close driver. {str(e)}\")\nE           AttributeError: 'TestInventory' object has no attribute 'log'\n\nTestInventory.py:105: AttributeError","steps":[],"attachments":[{"uid":"be08f9282e10b235","name":"log","source":"be08f9282e10b235.txt","type":"text/plain","size":9555}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestInventory::0","time":{"start":1688712766057,"stop":1688712766057,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"Inventory"},{"name":"severity","value":"normal"},{"name":"suite","value":"TestInventory"},{"name":"subSuite","value":"TestInventory"},{"name":"host","value":"0day"},{"name":"thread","value":"11400-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestInventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"12a763288c56acd4.json","parameterValues":[]}