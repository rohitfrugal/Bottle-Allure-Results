{"uid":"b9e0c7272d9bc2bb","name":"Create a new Category","fullName":"TestInventory.TestInventory#test_Add_newCategory_3___frugal_latido_com_np____Test_123____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__BikerJacket_jpg_____Automation__Item_02____AT_IT02____This_is_from_an_automated_Script__02____0___Kilogram__","historyId":"cfd507e81f3186e2325b6af35a0930a9","time":{"start":1685108500135,"stop":1685108511152,"duration":11017},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (967, 571). Other element would receive the click: <button type=\"button\" class=\"ant-btn ant-btn-primary\">...</button>\n  (Session info: chrome=113.0.5672.127)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00CC8893+48451]\n\t(No symbol) [0x00C5B8A1]\n\t(No symbol) [0x00B65058]\n\t(No symbol) [0x00B94BA4]\n\t(No symbol) [0x00B936E8]\n\t(No symbol) [0x00B91EEB]\n\t(No symbol) [0x00B912FE]\n\t(No symbol) [0x00B89AAC]\n\t(No symbol) [0x00BAA2BC]\n\t(No symbol) [0x00B89586]\n\t(No symbol) [0x00BAA614]\n\t(No symbol) [0x00BBC482]\n\t(No symbol) [0x00BAA0B6]\n\t(No symbol) [0x00B87E08]\n\t(No symbol) [0x00B88F2D]\n\tGetHandleVerifier [0x00F28E3A+2540266]\n\tGetHandleVerifier [0x00F68959+2801161]\n\tGetHandleVerifier [0x00F6295C+2776588]\n\tGetHandleVerifier [0x00D52280+612144]\n\t(No symbol) [0x00C64F6C]\n\t(No symbol) [0x00C611D8]\n\t(No symbol) [0x00C612BB]\n\t(No symbol) [0x00C54857]\n\tBaseThreadInitThunk [0x76E37D59+25]\n\tRtlInitializeExceptionChain [0x77D2B74B+107]\n\tRtlClearBits [0x77D2B6CF+191]","statusTrace":"self = <TestsCases.TestInventory.TestInventory testMethod=test_Add_newCategory_3___frugal_latido_com_np____Test_123____E___PO...a__Image__BikerJacket_jpg_____Automation__Item_02____AT_IT02____This_is_from_an_automated_Script__02____0___Kilogram__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nImagePath = 'E:\\\\POM_for_Bottle\\\\WebApp\\\\TestData\\\\InventoryData\\\\Image\\\\BikerJacket.jpg'\nname = '(Automation) Item 02', code = 'AT-IT02'\ndesc = 'This is from an automated Script (02)', leather_flag = 0\nunit = 'Kilogram'\n\n    @allure.title(f\"Create a new Category\")\n    @allure.story(\"Create a new Category from Add button \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/InventoryData/InventoryTestCase.xlsx\", \"TestInventory\"))\n    @unpack\n    def test_Add_newCategory(self, username, password, ImagePath, name, code, desc, leather_flag, unit):\n        self.LoginMethod.nativelogin(self.driver, username, password)\n        try:\n>           self.assertEqual(self.Inventory.AddInventory_Items(ImagePath, name, code, desc, leather_flag, unit), True, msg=\"Adding a New Category Failed \")\n\nTestInventory.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\executions\\InventoryExecutions\\InventoryMethods.py:48: in AddInventory_Items\n    self.fill_category_form(ImagePath, name, code, desc, leather_flag, unit)\n..\\executions\\InventoryExecutions\\InventoryMethods.py:26: in fill_category_form\n    self.Inventory.upload_image(ImagePath)\n..\\Pages\\Inventory\\InventoryPage.py:121: in upload_image\n    return self.wait.until(EC.visibility_of_element_located(self.OK_BTN)).click()\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:404: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001073D1995A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x76E37D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77D2B74B+107]\\\\n\\\\tRtlClearBits [0x77D2B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (967, 571). Other element would receive the click: <button type=\"button\" class=\"ant-btn ant-btn-primary\">...</button>\nE         (Session info: chrome=113.0.5672.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00CC8893+48451]\nE       \t(No symbol) [0x00C5B8A1]\nE       \t(No symbol) [0x00B65058]\nE       \t(No symbol) [0x00B94BA4]\nE       \t(No symbol) [0x00B936E8]\nE       \t(No symbol) [0x00B91EEB]\nE       \t(No symbol) [0x00B912FE]\nE       \t(No symbol) [0x00B89AAC]\nE       \t(No symbol) [0x00BAA2BC]\nE       \t(No symbol) [0x00B89586]\nE       \t(No symbol) [0x00BAA614]\nE       \t(No symbol) [0x00BBC482]\nE       \t(No symbol) [0x00BAA0B6]\nE       \t(No symbol) [0x00B87E08]\nE       \t(No symbol) [0x00B88F2D]\nE       \tGetHandleVerifier [0x00F28E3A+2540266]\nE       \tGetHandleVerifier [0x00F68959+2801161]\nE       \tGetHandleVerifier [0x00F6295C+2776588]\nE       \tGetHandleVerifier [0x00D52280+612144]\nE       \t(No symbol) [0x00C64F6C]\nE       \t(No symbol) [0x00C611D8]\nE       \t(No symbol) [0x00C612BB]\nE       \t(No symbol) [0x00C54857]\nE       \tBaseThreadInitThunk [0x76E37D59+25]\nE       \tRtlInitializeExceptionChain [0x77D2B74B+107]\nE       \tRtlClearBits [0x77D2B6CF+191]\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Inventory"},{"name":"severity","value":"normal"},{"name":"story","value":"Create a new Category from Add button "},{"name":"suite","value":"TestInventory"},{"name":"subSuite","value":"TestInventory"},{"name":"host","value":"0day"},{"name":"thread","value":"5116-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestInventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b9e0c7272d9bc2bb.json","parameterValues":[]}