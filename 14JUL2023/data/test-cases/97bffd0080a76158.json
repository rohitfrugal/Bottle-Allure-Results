{"uid":"97bffd0080a76158","name":"test_01_new_entry_list_1___Leather00_15____LT_015____Mulchand___Sons___2000___2023_07_14___10___Excellent____By_Truck____By_Cheque____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__","fullName":"TestReporting.TestReporting#test_01_new_entry_list_1___Leather00_15____LT_015____Mulchand___Sons___2000___2023_07_14___10___Excellent____By_Truck____By_Cheque____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__","historyId":"3becbf3f05c39dfd97a514b71eabf728","time":{"start":1689321375257,"stop":1689321404887,"duration":29630},"description":"Check for new Entry","descriptionHtml":"<p>Check for new Entry</p>\n","status":"broken","statusMessage":"TypeError: catching classes that do not inherit from BaseException is not allowed","statusTrace":"self = <Pages.Inventory.InventoryPage.InventoryPage object at 0x00000178454139D0>\nproductName = 'LT-015'\n\n    def getProduct_name(self, productName):\n        try:\n            PRODUCT_NAME = (By.XPATH, f\"//h4[@class='ant-typography material_item_name'][contains(text(), '{productName}')]\")\n>           name = self.wait.until(EC.visibility_of_element_located(PRODUCT_NAME)).text\n\n..\\Pages\\Inventory\\InventoryPage.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a1b8456d99a30f6e2d8b36f815f2766b\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000178453A5A20>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00F9A813+48355]\nE       \t(No symbol) [0x00F2C4B1]\nE       \t(No symbol) [0x00E35358]\nE       \t(No symbol) [0x00E609A5]\nE       \t(No symbol) [0x00E60B3B]\nE       \t(No symbol) [0x00E8E232]\nE       \t(No symbol) [0x00E7A784]\nE       \t(No symbol) [0x00E8C922]\nE       \t(No symbol) [0x00E7A536]\nE       \t(No symbol) [0x00E582DC]\nE       \t(No symbol) [0x00E593DD]\nE       \tGetHandleVerifier [0x011FAABD+2539405]\nE       \tGetHandleVerifier [0x0123A78F+2800735]\nE       \tGetHandleVerifier [0x0123456C+2775612]\nE       \tGetHandleVerifier [0x010251E0+616112]\nE       \t(No symbol) [0x00F35F8C]\nE       \t(No symbol) [0x00F32328]\nE       \t(No symbol) [0x00F3240B]\nE       \t(No symbol) [0x00F24FF7]\nE       \tBaseThreadInitThunk [0x76467D59+25]\nE       \tRtlInitializeExceptionChain [0x76F5B79B+107]\nE       \tRtlClearBits [0x76F5B71F+191]\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestReporting.TestReporting testMethod=test_01_new_entry_list_1___Leather00_15____LT_015____Mulchand___Son...cellent____By_Truck____By_Cheque____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__>\nItemName = 'Leather00-15', productName = 'LT-015'\nvendor_name = 'Mulchand & Sons', price = 2000, date = '2023-07-14'\nquantity = 10, quality = 'Excellent', transport_mode = 'By Truck'\nPay_mode = 'By Cheque', receiver_name = 'Rohit'\nimgPath = 'E:\\\\POM_for_Bottle\\\\WebApp\\\\TestData\\\\InventoryData\\\\Image\\\\Receipt.png'\n\n    @allure.description(\"Check for new Entry\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/ReportData/Report.xlsx\", \"checkReport\"))\n    @unpack\n    def test_01_new_entry_list(self, ItemName, productName, vendor_name, price, date, quantity, quality, transport_mode, Pay_mode, receiver_name, imgPath):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n>           self.assertEqual(self.Report.create_inventory_check(ItemName, productName, vendor_name, price, date, quantity, quality,\n                    transport_mode, Pay_mode, receiver_name, imgPath),\n                    True, msg=\"Verification failed! for Report List.\")\n\nTestReporting.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\executions\\ReportingExecutions\\ReportingMethods.py:52: in create_inventory_check\n    self.Inventory.stockItem_for_normal_item(ItemName, productName, vendor_name, price, date, quantity, quality, transport_mode, Pay_mode, receiver_name, imgPath)\n..\\executions\\InventoryExecutions\\InventoryMethods.py:103: in stockItem_for_normal_item\n    self.Inventory.getProduct_name(productName)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.Inventory.InventoryPage.InventoryPage object at 0x00000178454139D0>\nproductName = 'LT-015'\n\n    def getProduct_name(self, productName):\n        try:\n            PRODUCT_NAME = (By.XPATH, f\"//h4[@class='ant-typography material_item_name'][contains(text(), '{productName}')]\")\n            name = self.wait.until(EC.visibility_of_element_located(PRODUCT_NAME)).text\n            print(f'Name of the Product Selected : {name}')\n            self.wait.until(EC.visibility_of_element_located(PRODUCT_NAME)).click()\n>       except {NoSuchElementException, TimeoutException, Exception} as e:\nE       TypeError: catching classes that do not inherit from BaseException is not allowed\n\n..\\Pages\\Inventory\\InventoryPage.py:349: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestReporting","time":{"start":1689321375257,"stop":1689321375257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestReporting::0","time":{"start":1689321975518,"stop":1689321975518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Reporting Module Test Cases"},{"name":"suite","value":"TestReporting"},{"name":"subSuite","value":"TestReporting"},{"name":"host","value":"0day"},{"name":"thread","value":"12828-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestReporting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"97bffd0080a76158.json","parameterValues":[]}