{"uid":"b289f4768610bb90","name":"Create a new Order for new Customer","fullName":"TestOrder.TestOrder#test_create_new_user_order_3___frugal_latido_com_np____Test_123____9881012083____abced_Test_3____testuser183_mail_com____2023_05_29____Siliguri____male____Ek__male_____Black_Sheep____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_","historyId":"5d86ed56f5a029252bc24a1721d9a8d9","time":{"start":1686288028986,"stop":1686288133427,"duration":104441},"status":"broken","statusMessage":"AttributeError: 'TestOrder' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123'\ncontactNo = '9881012083', name = 'abced Test 3', email = 'testuser183@mail.com'\ndob = '2023-05-29', address = 'Siliguri', gender = 'male'\nproductname = 'Ek (male)', leatherProfile = 'Black Sheep', leatherSize = '38'\nhardware = 'Silver', lining = 'Black', polyfill = 'No', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Fit'\nremark = 'Test 001', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.story(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n\nTestOrder.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = \"None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\"\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123'\ncontactNo = '9881012083', name = 'abced Test 3', email = 'testuser183@mail.com'\ndob = '2023-05-29', address = 'Siliguri', gender = 'male'\nproductname = 'Ek (male)', leatherProfile = 'Black Sheep', leatherSize = '38'\nhardware = 'Silver', lining = 'Black', polyfill = 'No', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Fit'\nremark = 'Test 001', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.story(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Creating new Order for new customer.\",\n                          attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestOrder' object has no attribute 'log'\n\nTestOrder.py:79: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestOrder","time":{"start":1686287000731,"stop":1686287000731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'TestOrder' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123'\ncontactNo = '9881012083', name = 'abced Test 3', email = 'testuser183@mail.com'\ndob = '2023-05-29', address = 'Siliguri', gender = 'male'\nproductname = 'Ek (male)', leatherProfile = 'Black Sheep', leatherSize = '38'\nhardware = 'Silver', lining = 'Black', polyfill = 'No', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Fit'\nremark = 'Test 001', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.story(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n\nTestOrder.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = \"None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\"\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_3___frugal_latido_com_np____Test_123____98810120...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123'\ncontactNo = '9881012083', name = 'abced Test 3', email = 'testuser183@mail.com'\ndob = '2023-05-29', address = 'Siliguri', gender = 'male'\nproductname = 'Ek (male)', leatherProfile = 'Black Sheep', leatherSize = '38'\nhardware = 'Silver', lining = 'Black', polyfill = 'No', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Fit'\nremark = 'Test 001', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.story(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Creating new Order for new customer.\",\n                          attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestOrder' object has no attribute 'log'\n\nTestOrder.py:79: AttributeError","steps":[],"attachments":[{"uid":"95a39d2dca482062","name":"Creating new Order for new customer.","source":"95a39d2dca482062.png","type":"image/png","size":120887},{"uid":"c5421a08682f8f6","name":"log","source":"c5421a08682f8f6.txt","type":"text/plain","size":5894}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestOrder::0","time":{"start":1686289159772,"stop":1686289159774,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Order List"},{"name":"story","value":"Create an Order for new Customer "},{"name":"severity","value":"normal"},{"name":"suite","value":"TestOrder"},{"name":"subSuite","value":"TestOrder"},{"name":"host","value":"0day"},{"name":"thread","value":"9536-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestOrder"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"1ea92182d1548473","status":"broken","statusDetails":"TypeError: catching classes that do not inherit from BaseException is not allowed","time":{"start":1685710418549,"stop":1685710447514,"duration":28965}}]},"tags":[]},"source":"b289f4768610bb90.json","parameterValues":[]}