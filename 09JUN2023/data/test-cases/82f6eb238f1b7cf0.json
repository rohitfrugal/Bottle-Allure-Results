{"uid":"82f6eb238f1b7cf0","name":"Checking Dashboard data","fullName":"TestInventDashboard.TestInventDashboard#test_get_inventDash_details","historyId":"5d65d70d22c85c3ce76d7dccea8bf164","time":{"start":1686310470506,"stop":1686310487019,"duration":16513},"status":"broken","statusMessage":"AttributeError: 'TestInventDashboard' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\n\n    @allure.title(f\"Checking Dashboard data\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_inventDash_details(self):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n>           self.assertEqual(self.InventDash.execute_info_gather(), True, msg=\"Verification Failed to mismatch data.\")\n\nTestInventDashboard.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\nfirst = False, second = True, msg = 'Verification Failed to mismatch data.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\nfirst = False, second = True, msg = 'Verification Failed to mismatch data.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\nfirst = False, second = True\nmsg = 'False != True : Verification Failed to mismatch data.'\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: False != True : Verification Failed to mismatch data.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\n\n    @allure.title(f\"Checking Dashboard data\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_inventDash_details(self):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n            self.assertEqual(self.InventDash.execute_info_gather(), True, msg=\"Verification Failed to mismatch data.\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Failed_for_customer\", attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestInventDashboard' object has no attribute 'log'\n\nTestInventDashboard.py:36: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestInventDashboard","time":{"start":1686310470505,"stop":1686310470506,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'TestInventDashboard' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\n\n    @allure.title(f\"Checking Dashboard data\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_inventDash_details(self):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n>           self.assertEqual(self.InventDash.execute_info_gather(), True, msg=\"Verification Failed to mismatch data.\")\n\nTestInventDashboard.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\nfirst = False, second = True, msg = 'Verification Failed to mismatch data.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\nfirst = False, second = True, msg = 'Verification Failed to mismatch data.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\nfirst = False, second = True\nmsg = 'False != True : Verification Failed to mismatch data.'\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: False != True : Verification Failed to mismatch data.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_details>\n\n    @allure.title(f\"Checking Dashboard data\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_inventDash_details(self):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n            self.assertEqual(self.InventDash.execute_info_gather(), True, msg=\"Verification Failed to mismatch data.\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Failed_for_customer\", attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestInventDashboard' object has no attribute 'log'\n\nTestInventDashboard.py:36: AttributeError","steps":[],"attachments":[{"uid":"bceb9bd638652bdd","name":"Failed_for_customer","source":"bceb9bd638652bdd.png","type":"image/png","size":207410}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestInventDashboard::0","time":{"start":1686310518024,"stop":1686310518024,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Inventory Dashboard"},{"name":"severity","value":"normal"},{"name":"suite","value":"TestInventDashboard"},{"name":"subSuite","value":"TestInventDashboard"},{"name":"host","value":"0day"},{"name":"thread","value":"20736-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestInventDashboard"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":7},"items":[{"uid":"bef155ae2276b9c4","status":"failed","statusDetails":"AssertionError: False != True : Verification Failed to mismatch data.","time":{"start":1685711249653,"stop":1685711264211,"duration":14558}},{"uid":"e524661ca1e50706","status":"failed","statusDetails":"AssertionError: False != True : Verification Failed to mismatch title.","time":{"start":1685345301306,"stop":1685345316620,"duration":15314}},{"uid":"b98dd8a6911e46a0","status":"failed","statusDetails":"AssertionError: False != True : Verification Failed to mismatch title.","time":{"start":1685108416030,"stop":1685108428032,"duration":12002}},{"uid":"d4ec6b04be9a0634","status":"failed","statusDetails":"AssertionError: False != True : Verification Failed to mismatch title.","time":{"start":1685025681328,"stop":1685025693680,"duration":12352}},{"uid":"acb555d84df84e3e","status":"failed","statusDetails":"AssertionError: False != True : Verification Failed to mismatch title.","time":{"start":1684417479665,"stop":1684417493560,"duration":13895}},{"uid":"1d642ed5e6ef81e5","status":"failed","statusDetails":"AssertionError: False != True : Verification Failed to mismatch title.","time":{"start":1683886067684,"stop":1683886081261,"duration":13577}}]},"tags":[]},"source":"82f6eb238f1b7cf0.json","parameterValues":[]}