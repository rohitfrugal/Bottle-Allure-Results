{"uid":"d0af785a891af1ae","name":"Create a new Order for existing Customer","fullName":"TestOrder.TestOrder#test_create_order_customer_1___frugal_latido_com_np____Test_123____9860838855____female____Ek__male_____Black_Sheep____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_","historyId":"2c0c2ee3eac88a00434b620c4928e3a8","time":{"start":1685710515266,"stop":1685710606896,"duration":91630},"status":"failed","statusMessage":"AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_customer_1___frugal_latido_com_np____Test_123____98608388...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123'\ncontactNo = '9860838855', gender = 'female', productname = 'Ek (male)'\nleatherProfile = 'Black Sheep', leatherSize = '38', hardware = 'Silver'\nlining = 'Black', polyfill = 'No', size = '40', armhole = 5.6, height = 4.4\nshoulder = 5, weight = 46, length = 8, arms = 12, hips = 11, chest = 7\nwaist = 1, sleeves = 9, bodytype = 'Fit', remark = 'Test 001'\ndate = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for existing Customer\")\n    @allure.story(\"Create an Order for existing Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forCustomer\"))\n    @unpack\n    def test_create_order_customer(self, username, password, contactNo, gender, productname, leatherProfile,\n                                   leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(self.driver, username, password)\n        test_case_name = f\"Create a new Order for existing Customer : {contactNo} \"\n        try:\n            self.assertEqual(\n                self.Order.createOrder_Customer(contactNo, gender, productname, leatherProfile, leatherSize, hardware,\n                                                lining, polyfill, size, armhole, height, shoulder, weight, length, arms,\n                                                hips, chest, waist, sleeves, bodytype, remark, date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n    \n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Failed_for_customer\",\n                          attachment_type=AttachmentType.PNG)\n            self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\n>           raise e\n\nTestOrder.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTestOrder.py:44: in test_create_order_customer\n    self.assertEqual(\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: in _patched_equals\n    old(self, first, second, msg)\nE   AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestOrder","time":{"start":1685709569663,"stop":1685709569663,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_customer_1___frugal_latido_com_np____Test_123____98608388...p____38____Silver____Black____No____40___5_6__4_4__5__46__8__12__11__7__1__9___Fit____Test_001____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123'\ncontactNo = '9860838855', gender = 'female', productname = 'Ek (male)'\nleatherProfile = 'Black Sheep', leatherSize = '38', hardware = 'Silver'\nlining = 'Black', polyfill = 'No', size = '40', armhole = 5.6, height = 4.4\nshoulder = 5, weight = 46, length = 8, arms = 12, hips = 11, chest = 7\nwaist = 1, sleeves = 9, bodytype = 'Fit', remark = 'Test 001'\ndate = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for existing Customer\")\n    @allure.story(\"Create an Order for existing Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forCustomer\"))\n    @unpack\n    def test_create_order_customer(self, username, password, contactNo, gender, productname, leatherProfile,\n                                   leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(self.driver, username, password)\n        test_case_name = f\"Create a new Order for existing Customer : {contactNo} \"\n        try:\n            self.assertEqual(\n                self.Order.createOrder_Customer(contactNo, gender, productname, leatherProfile, leatherSize, hardware,\n                                                lining, polyfill, size, armhole, height, shoulder, weight, length, arms,\n                                                hips, chest, waist, sleeves, bodytype, remark, date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n    \n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Failed_for_customer\",\n                          attachment_type=AttachmentType.PNG)\n            self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\n>           raise e\n\nTestOrder.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTestOrder.py:44: in test_create_order_customer\n    self.assertEqual(\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: in _patched_equals\n    old(self, first, second, msg)\nE   AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.","steps":[],"attachments":[{"uid":"ebb32be6faeb76c9","name":"Failed_for_customer","source":"ebb32be6faeb76c9.png","type":"image/png","size":132001},{"uid":"4cac47e07ec4683","name":"log","source":"4cac47e07ec4683.txt","type":"text/plain","size":7228}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestOrder::0","time":{"start":1685711070089,"stop":1685711070089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Order List"},{"name":"severity","value":"normal"},{"name":"story","value":"Create an Order for existing Customer "},{"name":"suite","value":"TestOrder"},{"name":"subSuite","value":"TestOrder"},{"name":"host","value":"0day"},{"name":"thread","value":"15292-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestOrder"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d0af785a891af1ae.json","parameterValues":[]}