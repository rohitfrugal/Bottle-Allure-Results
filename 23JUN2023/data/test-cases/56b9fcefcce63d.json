{"uid":"56b9fcefcce63d","name":"Create a new Order for new Customer","fullName":"TestOrder.TestOrder#test_create_new_user_order_4___frugal_latido_com_np____Test_123___9881012093___abced_Test_88____testuser193_mail_com____2023_05_29____Siliguri____female____Exemplar__male_____Bronze_Mist_Antique____42____Golden_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_","historyId":"9073c049301c749fe2056ab5b690d150","time":{"start":1687501924657,"stop":1687502003159,"duration":78502},"description":"Create an Order for new Customer ","descriptionHtml":"<p>Create an Order for new Customer</p>\n","status":"broken","statusMessage":"AttributeError: 'TestOrder' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123', contactNo = 9881012093\nname = 'abced Test 88', email = 'testuser193@mail.com', dob = '2023-05-29'\naddress = 'Siliguri', gender = 'female', productname = 'Exemplar (male)'\nleatherProfile = 'Bronze Mist Antique', leatherSize = '42'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Skin Tight'\nremark = 'Test 002', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.description(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n\nTestOrder.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = \"None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\"\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123', contactNo = 9881012093\nname = 'abced Test 88', email = 'testuser193@mail.com', dob = '2023-05-29'\naddress = 'Siliguri', gender = 'female', productname = 'Exemplar (male)'\nleatherProfile = 'Bronze Mist Antique', leatherSize = '42'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Skin Tight'\nremark = 'Test 002', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.description(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException, AttributeError) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Creating new Order for new customer.\",\n                          attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestOrder' object has no attribute 'log'\n\nTestOrder.py:79: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestOrder","time":{"start":1687500628072,"stop":1687500628072,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"Create an Order for new Customer ","status":"broken","statusMessage":"AttributeError: 'TestOrder' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123', contactNo = 9881012093\nname = 'abced Test 88', email = 'testuser193@mail.com', dob = '2023-05-29'\naddress = 'Siliguri', gender = 'female', productname = 'Exemplar (male)'\nleatherProfile = 'Bronze Mist Antique', leatherSize = '42'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Skin Tight'\nremark = 'Test 002', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.description(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n\nTestOrder.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new Order.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nfirst = None, second = 'Order Succesfully Created'\nmsg = \"None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\"\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new Order.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_new_user_order_4___frugal_latido_com_np____Test_123___988101209...n_Antique____Black____Yes____40___5_6__4_4__5__46__8__12__11__7__1__9___Skin_Tight____Test_002____2023_06_29___100900_>\nusername = 'frugal@latido.com.np', password = 'Test@123', contactNo = 9881012093\nname = 'abced Test 88', email = 'testuser193@mail.com', dob = '2023-05-29'\naddress = 'Siliguri', gender = 'female', productname = 'Exemplar (male)'\nleatherProfile = 'Bronze Mist Antique', leatherSize = '42'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\narmhole = 5.6, height = 4.4, shoulder = 5, weight = 46, length = 8, arms = 12\nhips = 11, chest = 7, waist = 1, sleeves = 9, bodytype = 'Skin Tight'\nremark = 'Test 002', date = '2023-06-29', OTP = 100900\n\n    @allure.title(f\"Create a new Order for new Customer\")\n    @allure.description(\"Create an Order for new Customer \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forNewCustomer\"))\n    @unpack\n    def test_create_new_user_order(self, username, password, contactNo, name, email, dob, address, gender, productname,\n                                   leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height, shoulder, weight,\n                                   length, arms, hips, chest, waist, sleeves, bodytype, remark, date, OTP):\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(\n                self.Order.create_new_user_order(contactNo, name, email, dob, address, gender, productname,\n                                                 leatherProfile, leatherSize, hardware, lining, polyfill, size, armhole, height,\n                                                 shoulder, weight, length, arms, hips, chest, waist, sleeves, bodytype, remark,\n                                                 date, OTP),\n                \"Order Succesfully Created\", msg=\"Verification Failed to Create a new Order.\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException, AttributeError) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Creating new Order for new customer.\",\n                          attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestOrder' object has no attribute 'log'\n\nTestOrder.py:79: AttributeError","steps":[],"attachments":[{"uid":"9c00078fb6d2245a","name":"Creating new Order for new customer.","source":"9c00078fb6d2245a.png","type":"image/png","size":125515},{"uid":"1234d14f75bbee0a","name":"log","source":"1234d14f75bbee0a.txt","type":"text/plain","size":3322}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestOrder::0","time":{"start":1687502716177,"stop":1687502716177,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Order List"},{"name":"severity","value":"normal"},{"name":"suite","value":"TestOrder"},{"name":"subSuite","value":"TestOrder"},{"name":"host","value":"0day"},{"name":"thread","value":"2692-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestOrder"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"56b9fcefcce63d.json","parameterValues":[]}