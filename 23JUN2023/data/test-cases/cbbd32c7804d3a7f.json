{"uid":"cbbd32c7804d3a7f","name":"Create a New Order for store","fullName":"TestOrder.TestOrder#test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male_____Pink_Foil____41____Golden_Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__","historyId":"4738b08f413726d45e4f1c7aa394a29f","time":{"start":1687502606844,"stop":1687502660568,"duration":53724},"description":"Create a New Order for store","descriptionHtml":"<p>Create a New Order for store</p>\n","status":"broken","statusMessage":"AttributeError: 'TestOrder' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nproductname = 'Luigi (male)', leatherProfile = 'Pink Foil', leatherSize = '41'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\nbodytype = 'Comfort', length = 8, chest = 7, waist = '33', hips = 11\nshoulder = 5, sleeves = 9, arms = 12, weight = 46, front = '6', armhole = 5.6\nremarks = 'Test 002', price = 20000, discount = 1000, OTP = '101011'\n\n    @allure.title(\"Create a New Order for store\")\n    @allure.description(\"Create a New Order for store\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forStore\"))\n    @unpack\n    def test_create_order_store(self, username, password, productname, leatherProfile, leatherSize, hardware, lining,\n                                polyfill, size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms, weight, front,\n                                armhole, remarks, price, discount, OTP):\n        # Login with Admin\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(\n                self.Order.createOrder_Store(productname, leatherProfile, leatherSize, hardware, lining, polyfill,\n                                             size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms,\n                                             weight, front, armhole, remarks, price, discount, OTP),\n                \"Order Succesfully Created\",\n                msg=\"Verification Failed to Create a new user.\")\n\nTestOrder.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new user.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new user.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nfirst = None, second = 'Order Succesfully Created'\nmsg = \"None != 'Order Succesfully Created' : Verification Failed to Create a new user.\"\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new user.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nproductname = 'Luigi (male)', leatherProfile = 'Pink Foil', leatherSize = '41'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\nbodytype = 'Comfort', length = 8, chest = 7, waist = '33', hips = 11\nshoulder = 5, sleeves = 9, arms = 12, weight = 46, front = '6', armhole = 5.6\nremarks = 'Test 002', price = 20000, discount = 1000, OTP = '101011'\n\n    @allure.title(\"Create a New Order for store\")\n    @allure.description(\"Create a New Order for store\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forStore\"))\n    @unpack\n    def test_create_order_store(self, username, password, productname, leatherProfile, leatherSize, hardware, lining,\n                                polyfill, size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms, weight, front,\n                                armhole, remarks, price, discount, OTP):\n        # Login with Admin\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(\n                self.Order.createOrder_Store(productname, leatherProfile, leatherSize, hardware, lining, polyfill,\n                                             size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms,\n                                             weight, front, armhole, remarks, price, discount, OTP),\n                \"Order Succesfully Created\",\n                msg=\"Verification Failed to Create a new user.\")\n    \n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException, AttributeError) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Creating order for Store.\",\n                          attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestOrder' object has no attribute 'log'\n\nTestOrder.py:104: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestOrder","time":{"start":1687500628072,"stop":1687500628072,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"Create a New Order for store","status":"broken","statusMessage":"AttributeError: 'TestOrder' object has no attribute 'log'","statusTrace":"self = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nproductname = 'Luigi (male)', leatherProfile = 'Pink Foil', leatherSize = '41'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\nbodytype = 'Comfort', length = 8, chest = 7, waist = '33', hips = 11\nshoulder = 5, sleeves = 9, arms = 12, weight = 46, front = '6', armhole = 5.6\nremarks = 'Test 002', price = 20000, discount = 1000, OTP = '101011'\n\n    @allure.title(\"Create a New Order for store\")\n    @allure.description(\"Create a New Order for store\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forStore\"))\n    @unpack\n    def test_create_order_store(self, username, password, productname, leatherProfile, leatherSize, hardware, lining,\n                                polyfill, size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms, weight, front,\n                                armhole, remarks, price, discount, OTP):\n        # Login with Admin\n        self.LoginMethod.nativelogin(username, password)\n        try:\n>           self.assertEqual(\n                self.Order.createOrder_Store(productname, leatherProfile, leatherSize, hardware, lining, polyfill,\n                                             size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms,\n                                             weight, front, armhole, remarks, price, discount, OTP),\n                \"Order Succesfully Created\",\n                msg=\"Verification Failed to Create a new user.\")\n\nTestOrder.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new user.'\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nfirst = None, second = 'Order Succesfully Created'\nmsg = 'Verification Failed to Create a new user.'\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:845: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nfirst = None, second = 'Order Succesfully Created'\nmsg = \"None != 'Order Succesfully Created' : Verification Failed to Create a new user.\"\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: None != 'Order Succesfully Created' : Verification Failed to Create a new user.\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python310\\lib\\unittest\\case.py:838: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestOrder.TestOrder testMethod=test_create_order_store_4___frugal_latido_com_np____Test_123____Luigi__male..._Antique____Black____Yes____40____Comfort___8__7___33___11__5__9__12__46___6___5_6___Test_002___20000__1000___101011__>\nusername = 'frugal@latido.com.np', password = 'Test@123'\nproductname = 'Luigi (male)', leatherProfile = 'Pink Foil', leatherSize = '41'\nhardware = 'Golden Antique', lining = 'Black', polyfill = 'Yes', size = '40'\nbodytype = 'Comfort', length = 8, chest = 7, waist = '33', hips = 11\nshoulder = 5, sleeves = 9, arms = 12, weight = 46, front = '6', armhole = 5.6\nremarks = 'Test 002', price = 20000, discount = 1000, OTP = '101011'\n\n    @allure.title(\"Create a New Order for store\")\n    @allure.description(\"Create a New Order for store\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/OrderTestData/orderTestCase.xlsx\", \"forStore\"))\n    @unpack\n    def test_create_order_store(self, username, password, productname, leatherProfile, leatherSize, hardware, lining,\n                                polyfill, size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms, weight, front,\n                                armhole, remarks, price, discount, OTP):\n        # Login with Admin\n        self.LoginMethod.nativelogin(username, password)\n        try:\n            self.assertEqual(\n                self.Order.createOrder_Store(productname, leatherProfile, leatherSize, hardware, lining, polyfill,\n                                             size, bodytype, length, chest, waist, hips, shoulder, sleeves, arms,\n                                             weight, front, armhole, remarks, price, discount, OTP),\n                \"Order Succesfully Created\",\n                msg=\"Verification Failed to Create a new user.\")\n    \n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException, AttributeError) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Creating order for Store.\",\n                          attachment_type=AttachmentType.PNG)\n>           self.log.error(f\"Assertion failed here while finding element. {str(e)}\")\nE           AttributeError: 'TestOrder' object has no attribute 'log'\n\nTestOrder.py:104: AttributeError","steps":[],"attachments":[{"uid":"c82174cb2b006231","name":"Creating order for Store.","source":"c82174cb2b006231.png","type":"image/png","size":105776},{"uid":"73ef709e9021b466","name":"log","source":"73ef709e9021b466.txt","type":"text/plain","size":2553}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestOrder::0","time":{"start":1687502716177,"stop":1687502716177,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Order List"},{"name":"severity","value":"normal"},{"name":"suite","value":"TestOrder"},{"name":"subSuite","value":"TestOrder"},{"name":"host","value":"0day"},{"name":"thread","value":"2692-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestOrder"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":8,"unknown":0,"total":10},"items":[{"uid":"56b01f7db8993cb6","status":"passed","time":{"start":1686891991068,"stop":1686892037288,"duration":46220}},{"uid":"a3f83efdf21c6870","status":"passed","time":{"start":1686289058183,"stop":1686289106052,"duration":47869}},{"uid":"421d499c3fffe4f8","status":"passed","time":{"start":1685710979117,"stop":1685711023825,"duration":44708}},{"uid":"da578eee4ab9d8b6","status":"passed","time":{"start":1685345155278,"stop":1685345196583,"duration":41305}},{"uid":"9faeb6a95af5dc22","status":"passed","time":{"start":1685108216907,"stop":1685108257348,"duration":40441}},{"uid":"792411e1fc2142a9","status":"broken","statusDetails":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[11]/div/div[2]/div/div[2]/div[2]/form/input\"}\n  (Session info: chrome=113.0.5672.127)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00FC8893+48451]\n\t(No symbol) [0x00F5B8A1]\n\t(No symbol) [0x00E65058]\n\t(No symbol) [0x00E90467]\n\t(No symbol) [0x00E9069B]\n\t(No symbol) [0x00EBDD92]\n\t(No symbol) [0x00EAA304]\n\t(No symbol) [0x00EBC482]\n\t(No symbol) [0x00EAA0B6]\n\t(No symbol) [0x00E87E08]\n\t(No symbol) [0x00E88F2D]\n\tGetHandleVerifier [0x01228E3A+2540266]\n\tGetHandleVerifier [0x01268959+2801161]\n\tGetHandleVerifier [0x0126295C+2776588]\n\tGetHandleVerifier [0x01052280+612144]\n\t(No symbol) [0x00F64F6C]\n\t(No symbol) [0x00F611D8]\n\t(No symbol) [0x00F612BB]\n\t(No symbol) [0x00F54857]\n\tBaseThreadInitThunk [0x75467D59+25]\n\tRtlInitializeExceptionChain [0x777AB74B+107]\n\tRtlClearBits [0x777AB6CF+191]","time":{"start":1685024338249,"stop":1685024363816,"duration":25567}},{"uid":"b5ee2bc4b2e174a0","status":"passed","time":{"start":1684416918312,"stop":1684416964345,"duration":46033}},{"uid":"220ad76d1f12c6ae","status":"passed","time":{"start":1683887641110,"stop":1683887684752,"duration":43642}},{"uid":"52f625738cd8ee73","status":"passed","time":{"start":1683187770663,"stop":1683187818053,"duration":47390}}]},"tags":[]},"source":"cbbd32c7804d3a7f.json","parameterValues":[]}