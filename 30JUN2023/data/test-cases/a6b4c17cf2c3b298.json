{"uid":"a6b4c17cf2c3b298","name":"test_01_new_entry_list_6____Automation__Item_64____AT_IT_64____Tester___2000___2023_06_30___10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__","fullName":"TestReporting.TestReporting#test_01_new_entry_list_6____Automation__Item_64____AT_IT_64____Tester___2000___2023_06_30___10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__","historyId":"8890ef82bd7746f35f326e42a8445370","time":{"start":1688125691556,"stop":1688125718735,"duration":27179},"description":"Check for new Entry","descriptionHtml":"<p>Check for new Entry</p>\n","status":"broken","statusMessage":"TypeError: catching classes that do not inherit from BaseException is not allowed","statusTrace":"self = <Pages.Inventory.InventoryPage.InventoryPage object at 0x000001ECC270D240>\nproductName = 'AT-IT-64'\n\n    def getProduct_name(self, productName):\n        try:\n            PRODUCT_NAME = (By.XPATH, f\"//h4[@class='ant-typography material_item_name'][contains(text(), '{productName}')]\")\n>           name = self.wait.until(EC.visibility_of_element_located(PRODUCT_NAME)).text\n\n..\\Pages\\Inventory\\InventoryPage.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e7cc8edce5c4932e0c643defa690ac7e\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001ECC2827130>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0113A813+48355]\nE       \t(No symbol) [0x010CC4B1]\nE       \t(No symbol) [0x00FD5358]\nE       \t(No symbol) [0x010009A5]\nE       \t(No symbol) [0x01000B3B]\nE       \t(No symbol) [0x0102E232]\nE       \t(No symbol) [0x0101A784]\nE       \t(No symbol) [0x0102C922]\nE       \t(No symbol) [0x0101A536]\nE       \t(No symbol) [0x00FF82DC]\nE       \t(No symbol) [0x00FF93DD]\nE       \tGetHandleVerifier [0x0139AABD+2539405]\nE       \tGetHandleVerifier [0x013DA78F+2800735]\nE       \tGetHandleVerifier [0x013D456C+2775612]\nE       \tGetHandleVerifier [0x011C51E0+616112]\nE       \t(No symbol) [0x010D5F8C]\nE       \t(No symbol) [0x010D2328]\nE       \t(No symbol) [0x010D240B]\nE       \t(No symbol) [0x010C4FF7]\nE       \tBaseThreadInitThunk [0x74F67D59+25]\nE       \tRtlInitializeExceptionChain [0x76ECB79B+107]\nE       \tRtlClearBits [0x76ECB71F+191]\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestsCases.TestReporting.TestReporting testMethod=test_01_new_entry_list_6____Automation__Item_64____AT_IT_64____Test..._10___Bad____By_Truck____By_Cash____Rohit____E___POM_for_Bottle__WebApp__TestData__InventoryData__Image__Receipt_png__>\nItemName = '(Automation) Item 64', productName = 'AT-IT-64'\nvendor_name = 'Tester', price = 2000, date = '2023-06-30', quantity = 10\nquality = 'Bad', transport_mode = 'By Truck', Pay_mode = 'By Cash'\nreceiver_name = 'Rohit'\nimgPath = 'E:\\\\POM_for_Bottle\\\\WebApp\\\\TestData\\\\InventoryData\\\\Image\\\\Receipt.png'\n\n    @allure.description(\"Check for new Entry\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/ReportData/Report.xlsx\", \"checkReport\"))\n    @unpack\n    def test_01_new_entry_list(self, ItemName, productName, vendor_name, price, date, quantity, quality, transport_mode, Pay_mode, receiver_name, imgPath):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n>           self.assertEqual(self.Report.create_inventory_check(ItemName, productName, vendor_name, price, date, quantity, quality,\n                    transport_mode, Pay_mode, receiver_name, imgPath),\n                    True, msg=\"Verification failed! for Report List.\")\n\nTestReporting.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\executions\\ReportingExecutions\\ReportingMethods.py:52: in create_inventory_check\n    self.Inventory.stockItem_for_normal_item(ItemName, productName, vendor_name, price, date, quantity, quality, transport_mode, Pay_mode, receiver_name, imgPath)\n..\\executions\\InventoryExecutions\\InventoryMethods.py:101: in stockItem_for_normal_item\n    self.Inventory.getProduct_name(productName)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.Inventory.InventoryPage.InventoryPage object at 0x000001ECC270D240>\nproductName = 'AT-IT-64'\n\n    def getProduct_name(self, productName):\n        try:\n            PRODUCT_NAME = (By.XPATH, f\"//h4[@class='ant-typography material_item_name'][contains(text(), '{productName}')]\")\n            name = self.wait.until(EC.visibility_of_element_located(PRODUCT_NAME)).text\n            print(f'Name of the Product Selected : {name}')\n            self.wait.until(EC.visibility_of_element_located(PRODUCT_NAME)).click()\n>       except {NoSuchElementException, TimeoutException, Exception} as e:\nE       TypeError: catching classes that do not inherit from BaseException is not allowed\n\n..\\Pages\\Inventory\\InventoryPage.py:342: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestReporting","time":{"start":1688125417796,"stop":1688125417797,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestReporting::0","time":{"start":1688125987751,"stop":1688125987751,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Reporting Module Test Cases"},{"name":"severity","value":"normal"},{"name":"suite","value":"TestReporting"},{"name":"subSuite","value":"TestReporting"},{"name":"host","value":"0day"},{"name":"thread","value":"14064-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestReporting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a6b4c17cf2c3b298.json","parameterValues":[]}