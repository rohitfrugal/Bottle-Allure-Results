{"uid":"b42c08cd5be32670","name":"test_03_check_synchronization_5___Black____Best____clean____Heat_Raft____New_Type_Hide____cold_Touch__","fullName":"Test_11_LeatherManagement.TestLeatherManagement#test_03_check_synchronization_5___Black____Best____clean____Heat_Raft____New_Type_Hide____cold_Touch__","historyId":"af77d37b4cbcaee8a9809422c583fce2","time":{"start":1691740077281,"stop":1691740124012,"duration":46731},"description":"verification of newly created Leather into the List. ","descriptionHtml":"<p>verification of newly created Leather into the List.</p>\n","status":"failed","statusMessage":"AssertionError: False != True : Verify add new Leather","statusTrace":"self = <TestsCases.Test_11_LeatherManagement.TestLeatherManagement testMethod=test_03_check_synchronization_5___Black____Best____clean____Heat_Raft____New_Type_Hide____cold_Touch__>\nleather_name = 'Black', finish = 'Best', texture = 'clean'\naging_process = 'Heat-Raft', hide_type = 'New-Type-Hide', touch = 'cold-Touch'\n\n    @allure.description(\"verification of newly created Leather into the List. \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/LeatherManagement/LeatherTestData.xlsx\", \"synchronization\"))\n    @unpack\n    def test_03_check_synchronization(self, leather_name, finish, texture, aging_process, hide_type, touch):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n            self.assertEqual(self.Leather.check_synchronization(leather_name, finish, texture, aging_process, hide_type, touch),\n                             True, msg=\"Verify add new Leather\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException, AttributeError) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"verify_Leather_management\", attachment_type=AttachmentType.PNG)\n>           raise e\n\nTest_11_LeatherManagement.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTest_11_LeatherManagement.py:70: in test_03_check_synchronization\n    self.assertEqual(self.Leather.check_synchronization(leather_name, finish, texture, aging_process, hide_type, touch),\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: in _patched_equals\n    old(self, first, second, msg)\nE   AssertionError: False != True : Verify add new Leather","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestLeatherManagement","time":{"start":1691739778590,"stop":1691739778590,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"verification of newly created Leather into the List. ","status":"failed","statusMessage":"AssertionError: False != True : Verify add new Leather","statusTrace":"self = <TestsCases.Test_11_LeatherManagement.TestLeatherManagement testMethod=test_03_check_synchronization_5___Black____Best____clean____Heat_Raft____New_Type_Hide____cold_Touch__>\nleather_name = 'Black', finish = 'Best', texture = 'clean'\naging_process = 'Heat-Raft', hide_type = 'New-Type-Hide', touch = 'cold-Touch'\n\n    @allure.description(\"verification of newly created Leather into the List. \")\n    @allure.severity(allure.severity_level.NORMAL)\n    @data(*Utils.read_xlsx(\"../TestData/LeatherManagement/LeatherTestData.xlsx\", \"synchronization\"))\n    @unpack\n    def test_03_check_synchronization(self, leather_name, finish, texture, aging_process, hide_type, touch):\n        self.LoginMethod.nativelogin(\"frugal@latido.com.np\", \"Test@123\")\n        try:\n            self.assertEqual(self.Leather.check_synchronization(leather_name, finish, texture, aging_process, hide_type, touch),\n                             True, msg=\"Verify add new Leather\")\n        # Checking if assertion failed\n        except (NoSuchElementException, AssertionError, TimeoutException, AttributeError) as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"verify_Leather_management\", attachment_type=AttachmentType.PNG)\n>           raise e\n\nTest_11_LeatherManagement.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTest_11_LeatherManagement.py:70: in test_03_check_synchronization\n    self.assertEqual(self.Leather.check_synchronization(leather_name, finish, texture, aging_process, hide_type, touch),\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.3.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:33: in _patched_equals\n    old(self, first, second, msg)\nE   AssertionError: False != True : Verify add new Leather","steps":[],"attachments":[{"uid":"bde3ddaaab4480b5","name":"verify_Leather_management","source":"bde3ddaaab4480b5.png","type":"image/png","size":149426},{"uid":"b130dd504b605097","name":"log","source":"b130dd504b605097.txt","type":"text/plain","size":2410}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestLeatherManagement::0","time":{"start":1691740124030,"stop":1691740124030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Leather Management"},{"name":"severity","value":"normal"},{"name":"suite","value":"Test_11_LeatherManagement"},{"name":"subSuite","value":"TestLeatherManagement"},{"name":"host","value":"0day"},{"name":"thread","value":"8984-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test_11_LeatherManagement"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b42c08cd5be32670.json","parameterValues":[]}