{"uid":"b9d3816e77fbcbe2","name":"Comparing Dashboard data with List data for Category","fullName":"TestInventDashboard.TestInventDashboard#test_get_inventDash_rp","historyId":"0d880785b48a96ab8305682381a4d825","time":{"start":1684417493593,"stop":1684417518947,"duration":25354},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00D48893+48451]\n\t(No symbol) [0x00CDB8A1]\n\t(No symbol) [0x00BE5058]\n\t(No symbol) [0x00C10467]\n\t(No symbol) [0x00C1069B]\n\t(No symbol) [0x00C3DD92]\n\t(No symbol) [0x00C2A304]\n\t(No symbol) [0x00C3C482]\n\t(No symbol) [0x00C2A0B6]\n\t(No symbol) [0x00C07E08]\n\t(No symbol) [0x00C08F2D]\n\tGetHandleVerifier [0x00FA8E3A+2540266]\n\tGetHandleVerifier [0x00FE8959+2801161]\n\tGetHandleVerifier [0x00FE295C+2776588]\n\tGetHandleVerifier [0x00DD2280+612144]\n\t(No symbol) [0x00CE4F6C]\n\t(No symbol) [0x00CE11D8]\n\t(No symbol) [0x00CE12BB]\n\t(No symbol) [0x00CD4857]\n\tBaseThreadInitThunk [0x76317D59+25]\n\tRtlInitializeExceptionChain [0x77A4B74B+107]\n\tRtlClearBits [0x77A4B6CF+191]","statusTrace":"self = <TestsCases.TestInventDashboard.TestInventDashboard testMethod=test_get_inventDash_rp>\n\n    @allure.title(f\"Comparing Dashboard data with List data for Category\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_inventDash_rp(self):\n        self.LoginMethod.nativelogin(self.driver, \"frugal@latido.com.np\", \"Test@123\")\n        try:\n>           self.assertEqual(self.InventDash.get_full_inventory_rpt(), True, msg=\"Verification Failed to mismatch title.\")\n\nTestInventDashboard.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\executions\\InventDashboardExecutions\\InventDashboardMethods.py:67: in get_full_inventory_rpt\n    inventory_tab = self.inventDashboard.get_inventory_item_details()\n..\\Pages\\InventoryDashboard\\InventoryDashboardPage.py:117: in get_inventory_item_details\n    inventory_detail.append(self.wait.until(EC.visibility_of_element_located(self.INVENTORY_ITEM_QUANTITY)).text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f76fee62169d5c14cf35c2e4fb944ca9\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001A36EB88820>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00D48893+48451]\nE       \t(No symbol) [0x00CDB8A1]\nE       \t(No symbol) [0x00BE5058]\nE       \t(No symbol) [0x00C10467]\nE       \t(No symbol) [0x00C1069B]\nE       \t(No symbol) [0x00C3DD92]\nE       \t(No symbol) [0x00C2A304]\nE       \t(No symbol) [0x00C3C482]\nE       \t(No symbol) [0x00C2A0B6]\nE       \t(No symbol) [0x00C07E08]\nE       \t(No symbol) [0x00C08F2D]\nE       \tGetHandleVerifier [0x00FA8E3A+2540266]\nE       \tGetHandleVerifier [0x00FE8959+2801161]\nE       \tGetHandleVerifier [0x00FE295C+2776588]\nE       \tGetHandleVerifier [0x00DD2280+612144]\nE       \t(No symbol) [0x00CE4F6C]\nE       \t(No symbol) [0x00CE11D8]\nE       \t(No symbol) [0x00CE12BB]\nE       \t(No symbol) [0x00CD4857]\nE       \tBaseThreadInitThunk [0x76317D59+25]\nE       \tRtlInitializeExceptionChain [0x77A4B74B+107]\nE       \tRtlClearBits [0x77A4B6CF+191]\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestInventDashboard","time":{"start":1684417479664,"stop":1684417479665,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestInventDashboard::0","time":{"start":1684417535226,"stop":1684417535226,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Inventory Dashboard"},{"name":"severity","value":"normal"},{"name":"suite","value":"TestInventDashboard"},{"name":"subSuite","value":"TestInventDashboard"},{"name":"host","value":"0day"},{"name":"thread","value":"10320-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestInventDashboard"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"19e7efaa857a1e3","status":"passed","time":{"start":1683886081305,"stop":1683886096755,"duration":15450}}]},"tags":[]},"source":"b9d3816e77fbcbe2.json","parameterValues":[]}